name: Build & Publish

on:
  workflow_dispatch:
  push:
    branches: ["feature-**", "fix-**", staging, master]
    tags: ["**"]

jobs:
  build-and-publish-plugin:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      # --
      - name: Checkout repository
        uses: actions/checkout@v4

      # --
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.18"

      # --
      - name: Prepare build environment
        shell: bash
        id: prepare
        run: |
          plugin_name=$(node -p "require('./package.json').name")
          plugin_version=$(node -p "require('./package.json').version")
          echo "plugin_name=${plugin_name:?}" >> $GITHUB_OUTPUT
          echo "plugin_version=${plugin_version:?}" >> $GITHUB_OUTPUT

      # --
      - name: Append hash to plugin version
        run: |
          echo "::notice::This run was triggered by a commit. Appending the commit hash to the plugin version."  

          PACKAGE_FILE="package.json"

          SHA=$(cut -c1-7 <<< "${{ github.event.pull_request.head.sha || github.sha }}")
          VERSION=$(jq -r '.version' $PACKAGE_FILE)
          NEW_VERSION="$VERSION-$SHA"

          echo "::notice::Going from $VERSION to $NEW_VERSION"

          tmp=$(mktemp)
          jq --arg newversion "$NEW_VERSION" '.version = $newversion' $PACKAGE_FILE > $tmp
          mv $tmp $PACKAGE_FILE

          echo "::endgroup::"

      # --
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      # --
      - name: Install Dependencies
        run: pnpm install --lockfile-only

      # --
      - name: Download Decky CLI
        run: |
          mkdir -p "$(pwd)"/cli
          curl -L -o "$(pwd)"/cli/decky "https://github.com/SteamDeckHomebrew/cli/releases/latest/download/decky-linux-x86_64"
          chmod +x "$(pwd)"/cli/decky

      # --
      - name: Build plugin
        run: |
          # Run the CLI as root to get around Docker's weird permissions
          sudo .vscode/build.sh
          sudo chown -R $(whoami) out

      # --
      - name: Unzip plugin
        run: |
          mv -v out/*.zip out/${{ steps.prepare.outputs.plugin_name }}.zip
          for file in out/*.zip; do
            echo "Unzipping $file"
            unzip -qq "$file" -d out
          done
          rm -f out/${{ steps.prepare.outputs.plugin_name }}.zip
          mv -v out/* out/${{ steps.prepare.outputs.plugin_name }}
          tree out

      # --
      - name: Re-zip plugin
        run: |
          cd out
          zip -r ${{ steps.prepare.outputs.plugin_name }}.zip ${{ steps.prepare.outputs.plugin_name }}/*

      # --
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: out/*/

      # --
      - name: Check Version Tag Already Exists
        uses: mukunku/tag-exists-action@bdad1eaa119ce71b150b952c97351c75025c06a9 #v1.6.0
        id: check_version_tag_exists
        with:
          tag: ${{ steps.prepare.outputs.plugin_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --
      - name: Generate Tagged Release
        uses: ncipollo/release-action@440c8c1cb0ed28b9f43e4d1d670870f059653174 #v1.16.0
        if: steps.check_version_tag_exists.outputs.exists == 'false'
        with:
          name: "Tagged Build: ${{ steps.prepare.outputs.plugin_version }}"
          body: "Versioned release"
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "./out/*.zip"
          generateReleaseNotes: true
          allowUpdates: false
          skipIfReleaseExists: true
          tag: ${{ steps.prepare.outputs.plugin_version }}
          commit: master

      # --
      - name: Check Latest Tag Already Exists
        uses: mukunku/tag-exists-action@bdad1eaa119ce71b150b952c97351c75025c06a9 #v1.6.0
        id: check_latest_tag_exists
        with:
          tag: ${{ steps.prepare.outputs.plugin_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --
      - name: Delete Latest Release
        if: steps.check_latest_tag_exists.outputs.exists == 'true'
        run: gh release delete latest --cleanup-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --
      - name: Generate Latest Release
        uses: ncipollo/release-action@440c8c1cb0ed28b9f43e4d1d670870f059653174 #v1.16.0
        with:
          name: "Development Build"
          body: "Latest development release"
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: "./out/*.zip"
          generateReleaseNotes: true
          allowUpdates: true
          removeArtifacts: true
          replacesArtifacts: true
          tag: latest
          commit: master
          prerelease: true
